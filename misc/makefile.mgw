#  makefile.mgw:
#  Makefile for the CGUI library with Mingw32. Should not be used directly!
#
#  By Christer Sandberg (ported from Adime made by Sven Sandberg)
#
#  See readme.txt for more information about CGUI.
#
#  See makefile.all for a list of the available targets.

# -------- Define some variables that the primary makefile may use. --------

PLATFORM = MINGW32

EXE_SUFFIX = .exe
OBJ_SUFFIX = .o
LIB_SUFFIX = .a
HTML_SUFFIX = .html
INFO_SUFFIX = .info
TEXI_SUFFIX = .texi

_TX_HTML_FLAG = -html
_TX_TEXI_FLAG = -texi

ifndef OBJ_ROOT_DIR
OBJ_ROOT_DIR = obj
OBJ_ROOT_DIR_D = obj
endif
OBJ_PLATFORM_ROOT_DIR = $(OBJ_ROOT_DIR)/mingw32
OBJ_PLATFORM_ROOT_DIR_D = $(OBJ_ROOT_DIR_D)\mingw32

ifndef LIB_ROOT_DIR
LIB_ROOT_DIR = lib
LIB_ROOT_DIR_D = lib
endif
LIB_DIR = $(LIB_ROOT_DIR)/mingw32
LIB_DIR_D = $(LIB_ROOT_DIR)\mingw32


ifdef STATICLINK

# link as a static library
OBJ_DIR = $(OBJ_PLATFORM_ROOT_DIR)/$(PACKAGE5)_s
OBJ_DIR_D = $(OBJ_PLATFORM_ROOT_DIR_D)\$(PACKAGE5)_s
IMPLIB_BASENAME = lib$(PACKAGE5)_s.a
IMPLIB_NAME = $(LIB_DIR)/$(IMPLIB_BASENAME)
LIB_NAME = $(IMPLIB_NAME)

else

# link as a DLL
OBJ_DIR = $(OBJ_PLATFORM_ROOT_DIR)/$(PACKAGE5)
OBJ_DIR_D = $(OBJ_PLATFORM_ROOT_DIR_D)\$(PACKAGE5)
DLL_BASENAME = $(PACKAGE4)$(LIB_VERSION).dll
DLL_NAME = $(LIB_DIR)/$(DLL_BASENAME)
IMPLIB_BASENAME = lib$(PACKAGE5).a
IMPLIB_NAME = $(LIB_DIR)/$(IMPLIB_BASENAME)
LIB_NAME = $(DLL_NAME) $(IMPLIB_NAME)
EXPDEF_NAME = $(LIB_DIR)/cgui.def

endif



# -------- Check that environment path variable is set. --------

.PHONY: badwin badming

ifeq ($(OS),Windows_NT)
   WINSYSDIR = $(SYSTEMROOT)
   ifeq ($(WINSYSDIR),)
      WINSYSDIR = $(SystemRoot)
   endif
   WINSUBDIR = system32
else
   WINSYSDIR = $(WINDIR)
   ifeq ($(WINSYSDIR),)
      WINSYSDIR = $(windir)
   endif
   WINSUBDIR = system
endif

ifneq ($(WINSYSDIR),)
WINDIR_U = $(subst \,/,$(WINSYSDIR)/$(WINSUBDIR))
WINDIR_D = $(subst /,\,$(WINSYSDIR)\$(WINSUBDIR))
else
ifndef CROSSCOMPILE
badwin:
	@echo Your SYSTEMROOT or WINDIR environment variable is not set!
endif
endif

ifdef MINGDIR
MINGDIR_U = $(subst \,/,$(MINGDIR))
MINGDIR_D = $(subst /,\,$(MINGDIR))
else
badming:
	@echo MINGDIR variable not set!
	@echo You must set the environment variable MINGDIR to point to your mingw32
	@echo directory, e.g. "set MINGDIR=c:\mingw32"
endif

SYSTEM_INCLUDE_DIR = $(MINGDIR_U)/include
SYSTEM_INCLUDE_DIR_D = $(MINGDIR_D)\include
SYSTEM_LIB_DIR = $(MINGDIR_U)/lib
SYSTEM_LIB_DIR_D = $(MINGDIR_D)\lib

ifneq (,$(findstring /sh.exe,$(SHELL)))
  UNIX_TOOLS = 1
endif

ifdef UNIX_TOOLS
  CP = cp
  RM = rm
  MKDIR = mkdir
else
  CP = copy
  RM = del
  MKDIR = md
endif

# -------- Set up mktext --------
ALLEGRO_DAT = $(subst /,\,$(ALLEGRO_DAT_X))
ALLEGRO_DAT2C = $(subst /,\,$(ALLEGRO_DAT2C_X))
CGUI_DAT2C = $(subst /,\,$(CGUI_DAT2C_X))
CGUI_FONTS = $(subst /,\,$(CGUI_FONTS_X))
CGUI_FONTS_C = $(subst /,\,$(CGUI_FONTS_C_X))
CGUI_FONTS_H = $(subst /,\,$(CGUI_FONTS_H_X))
CGUI_ICONS = $(subst /,\,$(CGUI_ICONS_X))
CGUI_ICONS_C = $(subst /,\,$(CGUI_ICONS_C_X))
CGUI_ICONS_H = $(subst /,\,$(CGUI_ICONS_H_X))
CGUI_CURSORS = $(subst /,\,$(CGUI_CURSORS_X))
CGUI_CURSORS_C = $(subst /,\,$(CGUI_CURSORS_C_X))
CGUI_CURSORS_H = $(subst /,\,$(CGUI_CURSORS_H_X))
CGUI_DAT = $(subst /,\,$(CGUI_DAT_X))
CGUI_DAT_C = $(subst /,\,$(CGUI_DAT_C_X))
CGUI_DAT_H = $(subst /,\,$(CGUI_DAT_H_X))
CGUI_LABELS = $(subst /,\,$(CGUI_LABELS_X))
TEXT_SOURCES  = $(subst /,\,$(TEXT_SOURCES_X))
TEXT_HEADERS = $(subst /,\,$(TEXT_HEADERS_X))
MKTEXT = $(subst /,\,$(MKTEXT_X))


# -------- Give a sensible default target for make without any args. --------
# This must be done right after the tests, which can generate error targets.

.PHONY: _default

_default: default



# -------- Decide what compiler options and libraries to use. --------

ifdef WARNMODE
WFLAGS = -Wall -W -Werror
# -Wno-unused
else
WFLAGS = -Wall -Wno-unused
endif

ifdef PGCC
OFLAGS = -march=pentium -O6 -ffast-math
else
ifdef PENTIUMONLY
OFLAGS = -march=pentium -O2 -funroll-loops -ffast-math
else
OFLAGS = -O3 -funroll-loops -ffast-math
endif
endif

ifdef DEBUGMODE
# -------- debugging build --------
CFLAGS = -DDEBUGMODE=$(DEBUGMODE) $(WFLAGS) -g -DALLEGRO_STATICLINK -Wl,--subsystem,windows
SFLAGS = -DDEBUGMODE=$(DEBUGMODE) $(WFLAGS)
LFLAGS += -g
ifdef STATICLINK_ALLEGRO
LIB_FLAGS = -Wl,--subsystem,windows -g -lalleg -lgdi32 -static -lalleggl -ljpgalleg -lkernel32 -luser32 -lgdi32 -lcomdlg32 -lole32 -ldinput -lddraw -ldxguid -lwinmm -ldsound -static-libgcc
else
LIB_FLAGS = -lalld
endif
else
ifdef PROFILEMODE
# -------- profiling build --------
CFLAGS = $(WFLAGS) $(OFLAGS) -pg
SFLAGS = $(WFLAGS)
LFLAGS += -pg
ifdef STATICLINK_ALLEGRO
LIB_FLAGS = -lallp_s
else
LIB_FLAGS = -lallp
endif
else
# -------- optimised build --------
CFLAGS = $(WFLAGS) $(OFLAGS) -DALLEGRO_STATICLINK -Wl,--subsystem,windows
SFLAGS = $(WFLAGS)
ifndef SYMBOLMODE
LFLAGS += -s
endif
ifdef STATICLINK_ALLEGRO
LIB_FLAGS = -Wl,--subsystem,windows -lalleg -lgdi32 -static -lalleggl -ljpgalleg -lkernel32 -luser32 -lgdi32 -lcomdlg32 -lole32 -ldinput -lddraw -ldxguid -lwinmm -ldsound -static-libgcc
else
LIB_FLAGS = -lalleg
endif
endif
endif

ifdef CGUI_DEVELOPING
CFLAGS += -D_CGUI_DEVELOPING=1
endif
ifdef CGUI_FORTIFY
CFLAGS += -D_CGUI_FORTIFY=1 -DFORTIFY
endif

LFLAGS += -L$(SYSTEM_LIB_DIR)

ifdef STATICLINK_ALLEGRO
CFLAGS += -DALLEGRO_STATICLINK
CFLAGS_NO_OPTIMIZE = $(WFLAGS) -DALLEGRO_STATICLINK
else
CFLAGS_NO_OPTIMIZE = $(WFLAGS)
endif

COMPILE_FLAGS = $(subst src/,-DCGUI_SRC ,$(findstring src/, $<))$(CFLAGS)
COMPILE_FLAGS_NO_OPTIMIZE = $(subst src/,-DCGUI_SRC ,$(findstring src/, $<))$(CFLAGS_NO_OPTIMIZE)

ifdef STATICLINK
COMPILE_FLAGS += -DCGUI_STATICLINK
LIB_FLAGS += -lkernel32 -luser32 -lgdi32 -lcomdlg32 -lole32 -ldinput \
 -lddraw -ldxguid -lwinmm -ldsound
endif

ifdef PROFILEMODE
LIB_FLAGS += -lgmon
endif

ifdef CGUI_FORTIFY
CFLAGS += -D_CGUI_FORTIFY=1 -DFORTIFY
endif


# -------- List platform specific objects and programs. --------

VPATH +=

OBJ_LIST = $(COMMON_OBJS)

# Insert names of targets to build platform specific programs here.
PROGRAMS =
# Insert targets to build platform specific programs here.
# myprogram: path/myprogram$(EXE_SUFFIX)



# -------- Define how to compile. --------

GCC2MINGW = -UDJGPP -D__MINGW32__

ifdef CROSSCOMPILE
DLLWRAP = i386-mingw32msvc-dllwrap
WINDRES = windres
else
DLLWRAP = dllwrap
WINDRES = i386-mingw32msvc-windres
endif

COMPILE_C_TO_OBJ_DEPS =
define COMPILE_C_TO_OBJ
gcc $(COMPILE_FLAGS) -I./include -o $@ -c $<
endef
define COMPILE_C_TO_OBJ_NO_OPTIMIZE
gcc $(COMPILE_FLAGS_NO_OPTIMIZE) -I./include -o $@ -c $<
endef

COMPILE_S_TO_OBJ_DEPS =
define COMPILE_S_TO_OBJ
gcc $(SFLAGS) -I./include -x assembler-with-cpp -o $@ -c $<
endef

ifdef STATICLINK
# link as a static library

LINK_OBJ_TO_LIB_DEPS =
define LINK_OBJ_TO_LIB
ar rs $(LIB_NAME) $(LIB_OBJS)
endef

LINK_OBJ_TO_EXE_DEPS =
define LINK_OBJ_TO_EXE
gcc $(LFLAGS) -mwindows -o $@ $< $(IMPLIB_NAME) $(LIB_FLAGS)
endef

LINK_OBJ_TO_EXE_NOLIB_DEPS =
define LINK_OBJ_TO_EXE_NOLIB
gcc $(LFLAGS) -mwindows -o $@ $<
endef

LINK_OBJ_TO_EXE_NOCGUILIB_DEPS =
define LINK_OBJ_TO_EXE_NOCGUILIB
gcc $(LFLAGS) -mwindows -o $@ $< $(LIB_FLAGS)
endef

LINK_ALL_OBJ_TO_EXE_DEPS =
define LINK_ALL_OBJ_TO_EXE
gcc $(LFLAGS) -mwindows -o $@ $^ $(IMPLIB_NAME) $(LIB_FLAGS)
endef

LINK_ALL_OBJ_TO_EXE_NOLIB_DEPS =
define LINK_ALL_OBJ_TO_EXE_NOLIB
gcc $(LFLAGS) -mwindows -o $@ $^
endef

LINK_ALL_OBJ_TO_EXE_NOCGUILIB_DEPS =
define LINK_ALL_OBJ_TO_EXE_NOCGUILIB
gcc $(LFLAGS) -mwindows -o $@ $^ $(LIB_FLAGS)
endef

LINK_CONSOLE_DEPS =
define LINK_CONSOLE
gcc $(LFLAGS) -o $@ $< $(IMPLIB_NAME) $(LIB_FLAGS)
endef

LINK_CONSOLE_NOLIB_DEPS =
define LINK_CONSOLE_NOLIB
gcc $(LFLAGS) -o $@ $< $(LIB_FLAGS)
endef

else
# link as a DLL

LINK_OBJ_TO_LIB_DEPS =
ifdef FASTDLL
define LINK_OBJ_TO_LIB
gcc $(LFLAGS) -shared -Wl,--out-implib,$(IMPLIB_NAME),--just-symbols,$(EXPDEF_NAME) -o $(DLL_NAME) $(LIB_OBJS) $(LIB_FLAGS)
endef
else
define LINK_OBJ_TO_LIB
dllwrap --def $(EXPDEF_NAME) -o $(DLL_NAME) $(LIB_OBJS) $(LIB_FLAGS) --output-lib $(IMPLIB_NAME)
endef
endif

LINK_OBJ_TO_EXE_DEPS =
define LINK_OBJ_TO_EXE
gcc $(LFLAGS) -mwindows -o $@ $< $(IMPLIB_NAME) $(LIB_FLAGS)
endef

LINK_OBJ_TO_EXE_NOLIB_DEPS =
define LINK_OBJ_TO_EXE_NOLIB
gcc $(LFLAGS) -mwindows -o $@ $<
endef

LINK_OBJ_TO_EXE_NOCGUILIB_DEPS =
define LINK_OBJ_TO_EXE_NOCGUILIB
gcc $(LFLAGS) -mwindows -o $@ $< $(LIB_FLAGS)
endef

LINK_ALL_OBJ_TO_EXE_DEPS =
define LINK_ALL_OBJ_TO_EXE
gcc $(LFLAGS) -mwindows -o $@ $^ $(IMPLIB_NAME) $(LIB_FLAGS)
endef

LINK_ALL_OBJ_TO_EXE_NOLIB_DEPS =
define LINK_ALL_OBJ_TO_EXE_NOLIB
gcc $(LFLAGS) -mwindows -o $@ $^
endef

LINK_ALL_OBJ_TO_EXE_NOCGUILIB_DEPS =
define LINK_ALL_OBJ_TO_EXE_NOCGUILIB
gcc $(LFLAGS) -mwindows -o $@ $^ $(LIB_FLAGS)
endef

LINK_CONSOLE_DEPS = $(IMPLIB_NAME)
define LINK_CONSOLE
gcc $(LFLAGS) -o $@ $< $(IMPLIB_NAME)
endef

LINK_CONSOLE_NOLIB_DEPS =
define LINK_CONSOLE_NOLIB
gcc $(LFLAGS) -o $@ $<
endef

endif # ifdef STATICLINK



# -------- Rules for installing and removing the library files. --------

ifdef CROSSCOMPILE

ifndef STATICLINK
$(WINDIR_U)/$(DLL_BASENAME): $(DLL_NAME)
	cp $(subst \,/,$< $@)
endif

$(SYSTEM_LIB_DIR)/$(IMPLIB_BASENAME): $(IMPLIB_NAME)
	cp $(subst \,/,$< $@)

$(SYSTEM_INCLUDE_DIR)/cgui.h: include/cgui.h
	cp $(subst \,/,$< $@)

$(SYSTEM_INCLUDE_DIR)/cgui:
	mkdir $(subst \,/,$@)

$(SYSTEM_INCLUDE_DIR)/cgui/%.h: include/cgui/%.h include/cgui
	cp $(subst \,/,$< $@)

else # ifdef CROSSCOMPILE

ifndef STATICLINK
$(WINDIR_U)/$(DLL_BASENAME): $(DLL_NAME)
	$(CP) $(subst /,\,$< $@)
endif

$(SYSTEM_LIB_DIR)/$(IMPLIB_BASENAME): $(IMPLIB_NAME)
	$(CP) $(subst /,\,$< $@)

$(SYSTEM_INCLUDE_DIR)/cgui.h: include/cgui.h
	$(CP) $(subst /,\,$< $@)

$(SYSTEM_INCLUDE_DIR)/cgui:
	$(MKDIR) $(subst /,\,$@)

$(SYSTEM_INCLUDE_DIR)/cgui/%.h: include/cgui/%.h include/cgui
	$(CP) $(subst /,\,$< $@)

endif # ifdef CROSSCOMPILE else


INSTALL_HEADERS = $(addprefix $(MINGDIR_U)/,$(wildcard include/cgui/*.h))

INSTALL_FILES = $(SYSTEM_LIB_DIR)/$(IMPLIB_BASENAME) \
 $(SYSTEM_INCLUDE_DIR)/cgui.h \
 $(SYSTEM_INCLUDE_DIR)/cgui \
 $(INSTALL_HEADERS)

ifndef CROSSCOMPILE
ifndef STATICLINK
INSTALL_FILES += $(WINDIR_U)/$(DLL_BASENAME)
endif
endif

install: $(INSTALL_FILES)
	@echo The $(DESCRIPTION) MINGW32 library has been installed.

UNINSTALL_FILES = $(SYSTEM_LIB_DIR)/libcgui.a $(SYSTEM_LIB_DIR)/libcguid.a \
 $(SYSTEM_INCLUDE_DIR)/cgui.h $(SYSTEM_INCLUDE_DIR)/cgui/*.h \
 $(WINDIR_U)/cgui$(LIB_VERSION).dll $(WINDIR_U)/cguid$(LIB_VERSION).dll

uninstall:
	-rm -fv $(UNINSTALL_FILES)
	-rd $(SYSTEM_INCLUDE_DIR_D)\cgui
	@echo All gone!



# -------- Compile anything that can't be done in makefile.all. --------

# this section is empty


# -------- generate automatic dependencies --------
# Note that this must be done with djgpp!

DEPEND_PARAMS = $(GCC2MINGW) -MM -MG -I./include -DCGUI_SCAN_DEPEND

depend:
	gcc $(DEPEND_PARAMS) src/*.c examples/*.c > _depend.tmp
	sed -e 's/^\([a-zA-Z0-9_]*\)\.o:/obj\/mingw32\/cgui\/\1\.o:/' _depend.tmp > obj/mingw32/cgui/makefile.dep
	sed -e 's/^\([a-zA-Z0-9_]*\)\.o:/obj\/mingw32\/cguid\/\1\.o:/' _depend.tmp > obj/mingw32/cguid/makefile.dep
	sed -e 's/^\([a-zA-Z0-9_]*\)\.o:/obj\/mingw32\/cgui_s\/\1\.o:/' _depend.tmp > obj/mingw32/cgui_s/makefile.dep
	sed -e 's/^\([a-zA-Z0-9_]*\)\.o:/obj\/mingw32\/cguid_s\/\1\.o:/' _depend.tmp > obj/mingw32/cguid_s/makefile.dep
	rm _depend.tmp
