#  makefile.vc:
#  Makefile for the CGUI library with MSVC. Should not be used directly!
#
#  By Christer Sandberg (ported from Adime made by Sven Sandberg).
#
#  See readme.txt for more information about CGUI.
#
#  See makefile.all for a list of the available targets.
#
#
#  To path MSVC so it can be used from the commandline, run the
#  vcvars32.bat file which can be found in your MSVC bin directory.
#
#  This build uses djgpp for calculating
#  source dependencies, so you'll need to have that installed as well.
#
#  The "depend" target uses sed.



# -------- define some variables that the primary makefile will use --------

PLATFORM = MSVC

EXE_SUFFIX = .exe
OBJ_SUFFIX = .obj
LIB_SUFFIX = .lib
HTML_SUFFIX = .html
INFO_SUFFIX = .info
TEXI_SUFFIX = .texi

_TX_HTML_FLAG = -html
_TX_TEXI_FLAG = -texi

ifndef OBJ_ROOT_DIR
OBJ_ROOT_DIR = obj
OBJ_ROOT_DIR_D = obj
endif
OBJ_PLATFORM_ROOT_DIR = $(OBJ_ROOT_DIR)/msvc
OBJ_PLATFORM_ROOT_DIR_D = $(OBJ_ROOT_DIR_D)\msvc

ifndef LIB_ROOT_DIR
LIB_ROOT_DIR = lib
LIB_ROOT_DIR_D = lib
endif
LIB_DIR = $(LIB_ROOT_DIR)/msvc
LIB_DIR_D = $(LIB_ROOT_DIR)\msvc


ifdef STATICLINK

# link as a static library
OBJ_DIR = $(OBJ_PLATFORM_ROOT_DIR)/$(PACKAGE5)_s
OBJ_DIR_D = $(OBJ_PLATFORM_ROOT_DIR_D)\$(PACKAGE5)_s
IMPLIB_BASENAME = $(PACKAGE5)_s$(LIB_SUFFIX)
IMPLIB_NAME = $(LIB_DIR)/$(IMPLIB_BASENAME)
LIB_NAME = $(IMPLIB_NAME)

else

# link as a DLL
OBJ_DIR = $(OBJ_PLATFORM_ROOT_DIR)/$(PACKAGE5)
OBJ_DIR_D = $(OBJ_PLATFORM_ROOT_DIR_D)\$(PACKAGE5)
DLL_BASENAME = $(PACKAGE4)$(LIB_VERSION).dll
DLL_NAME = $(LIB_DIR)/$(DLL_BASENAME)
IMPLIB_BASENAME = $(PACKAGE4)$(LIB_SUFFIX)
IMPLIB_NAME = $(LIB_DIR)/$(IMPLIB_BASENAME)
LIB_NAME = $(DLL_NAME) $(IMPLIB_NAME)
EXPDEF_NAME = $(LIB_DIR)/cgui.def

endif



# -------- Check that environment path variables are set. --------

.PHONY: badwin badmsvc badspaces

ifeq ($(OS),Windows_NT)
   WINSYSDIR = $(SYSTEMROOT)
   ifeq ($(WINSYSDIR),)
      WINSYSDIR = $(SystemRoot)
   endif
   WINSUBDIR = system32
else
   WINSYSDIR = $(WINDIR)
   ifeq ($(WINSYSDIR),)
      WINSYSDIR = $(windir)
   endif
   WINSUBDIR = system
endif

ifneq ($(WINSYSDIR),)
WINDIR_U = $(subst \,/,$(WINSYSDIR)/$(WINSUBDIR))
WINDIR_D = $(subst /,\,$(WINSYSDIR)/$(WINSUBDIR))
else
badwin:
	@echo Your SYSTEMROOT or windir environment variable is not set!
endif

ifdef MSVCDIR
MSVCDIR_U = $(subst \,/,$(MSVCDIR))
MSVCDIR_D = $(subst /,\,$(MSVCDIR))
else
ifdef MSDEVDIR
MSVCDIR_U = $(subst \,/,$(MSDEVDIR))
MSVCDIR_D = $(subst /,\,$(MSDEVDIR))
else
badmsvc:
	@echo Your MSVCDIR or MSDEVDIR environment variable is not set!
endif
endif

NULLSTRING :=
SPACE := $(NULLSTRING) # special magic to get an isolated space character

ifneq ($(findstring $(SPACE),$(MSVCDIR)$(MSDEVDIR)),)
badspaces:
	@echo There are spaces in your MSVCDIR or MSDEVDIR environment
	@echo variables: please change these to the 8.3 short filename
	@echo version, or move your compiler to a different directory.
endif

SYSTEM_INCLUDE_DIR = $(MSVCDIR_U)/include
SYSTEM_INCLUDE_DIR_D = $(MSVCDIR_D)\include
SYSTEM_LIB_DIR = $(MSVCDIR_U)/lib
SYSTEM_LIB_DIR_D = $(MSVCDIR_D)\lib



# -------- Set up mktext --------
ALLEGRO_DAT = $(subst /,\,$(ALLEGRO_DAT_X))
ALLEGRO_DAT2C = $(subst /,\,$(ALLEGRO_DAT2C_X))
CGUI_DAT2C = $(subst /,\,$(CGUI_DAT2C_X))
CGUI_FONTS = $(subst /,\,$(CGUI_FONTS_X))
CGUI_FONTS_C = $(subst /,\,$(CGUI_FONTS_C_X))
CGUI_FONTS_H = $(subst /,\,$(CGUI_FONTS_H_X))
CGUI_ICONS = $(subst /,\,$(CGUI_ICONS_X))
CGUI_ICONS_C = $(subst /,\,$(CGUI_ICONS_C_X))
CGUI_ICONS_H = $(subst /,\,$(CGUI_ICONS_H_X))
CGUI_CURSORS = $(subst /,\,$(CGUI_CURSORS_X))
CGUI_CURSORS_C = $(subst /,\,$(CGUI_CURSORS_C_X))
CGUI_CURSORS_H = $(subst /,\,$(CGUI_CURSORS_H_X))
CGUI_DAT = $(subst /,\,$(CGUI_DAT_X))
CGUI_DAT_C = $(subst /,\,$(CGUI_DAT_C_X))
CGUI_DAT_H = $(subst /,\,$(CGUI_DAT_H_X))
CGUI_LABELS = $(subst /,\,$(CGUI_LABELS_X))
TEXT_SOURCES  = $(subst /,\,$(TEXT_SOURCES_X))
TEXT_HEADERS = $(subst /,\,$(TEXT_HEADERS_X))
MKTEXT = $(subst /,\,$(MKTEXT_X))

# -------- Define runner --------

RUNNER := obj/msvc/runner.exe
RUNNER_DEP := obj/msvc/runner.exe
define COMPILE_RUNNER
gcc -O -Wall -Werror -o $(RUNNER) $(RUNNER_SOURCE)
endef

# -------- give a sensible default target for make without any args --------

.PHONY: _default

_default: default



# -------- decide what compiler options to use --------

ifdef WARNMODE
WFLAGS = -W3 -WX
else
WFLAGS = -W1
endif

ifdef DEBUGMODE
# -------- debugging build --------
CFLAGS = -DDEBUGMODE=$(DEBUGMODE) $(WFLAGS) -Gd -Zi -MDd
SFLAGS = -DDEBUGMODE=$(DEBUGMODE) -Wall
LFLAGS = -debug -debugtype:cv
ifdef STATICLINK_ALLEGRO
LIB_FLAGS = alld_s.lib
else
LIB_FLAGS = alld.lib
endif
else
ifdef PROFILEMODE
# -------- profiling build --------
CFLAGS = $(WFLAGS) -Gd -Ox -GB -MD
SFLAGS = -Wall
LFLAGS = -profile
ifdef STATICLINK_ALLEGRO
LIB_FLAGS = allp_s.lib
else
LIB_FLAGS = allp.lib
endif
else
# -------- optimised build --------
CFLAGS = $(WFLAGS) -Gd -Ox -GB -MD
SFLAGS = -Wall
LFLAGS = -release
ifdef STATICLINK_ALLEGRO
LIB_FLAGS = alleg_s.lib
else
LIB_FLAGS = alleg.lib
endif
endif
endif

CFLAGS += -Zm1000
ifdef STATICLINK_ALLEGRO
CFLAGS += -DALLEGRO_STATICLINK -DCGUI_STATICLINK
endif

ifdef CGUI_DEVELOPING
CFLAGS += -D_CGUI_DEVELOPING=1
endif
ifdef CGUI_FORTIFY
CFLAGS += -D_CGUI_FORTIFY=1 -DFORTIFY
endif

CFLAGS_NO_OPTIMIZE = $(WFLAGS) -Gd -MT

COMPILE_FLAGS = $(subst src/,-DCGUI_SRC ,$(findstring src/, $<))$(CFLAGS)
COMPILE_FLAGS_NO_OPTIMIZE = $(subst src/,-DCGUI_SRC ,$(findstring src/, $<))$(CFLAGS_NO_OPTIMIZE)

ifdef STATICLINK
COMPILE_FLAGS += -DCGUI_STATICLINK
endif

LIB_FLAGS += kernel32.lib user32.lib gdi32.lib comdlg32.lib ole32.lib \
 dinput.lib ddraw.lib dxguid.lib winmm.lib dsound.lib



# -------- List platform specific objects and programs. --------

VPATH +=

OBJ_LIST = $(COMMON_OBJS)

# Insert names of targets to build platform specific programs here.
PROGRAMS =
# Insert targets to build platform specific programs here.
# myprogram: path/myprogram$(EXE_SUFFIX)



# -------- Define how to compile. --------

GCC2MSVC = -D_MSC_VER -D_WIN32 -D_M_IX86 -U__GNUC__ -UDJGPP -U__unix__

COMPILE_C_TO_OBJ_DEPS = $(RUNNER_DEP)
define COMPILE_C_TO_OBJ
$(RUNNER) cl @ -nologo $(COMPILE_FLAGS) -I./include -Fo$@ -c $<
endef
define COMPILE_C_TO_OBJ_NO_OPTIMIZE
$(RUNNER) cl @ -nologo $(COMPILE_FLAGS_NO_OPTIMIZE) -I./include -Fo$@ -c $<
endef

COMPILE_S_TO_OBJ_DEPS = $(RUNNER_DEP)
define COMPILE_S_TO_OBJ
gcc $(GCC2MSVC) $(SFLAGS) -I./include -x assembler-with-cpp -o $@ -c $<
endef

LINK_OBJ_TO_EXE_DEPS = $(RUNNER_DEP)
define LINK_OBJ_TO_EXE
$(RUNNER) link @ -nologo $(LFLAGS) -subsystem:windows -out:$@ $< $(IMPLIB_NAME) $(LIB_FLAGS)
endef

LINK_OBJ_TO_EXE_NOLIB_DEPS = $(RUNNER_DEP)
define LINK_OBJ_TO_EXE_NOLIB
$(RUNNER) link @ -nologo $(LFLAGS) -subsystem:console -out:$@ $< 
endef

LINK_OBJ_TO_EXE_NOCGUILIB_DEPS = $(RUNNER_DEP)
define LINK_OBJ_TO_EXE_NOCGUILIB
$(RUNNER) link @ -nologo $(LFLAGS) -subsystem:console -out:$@ $< $(LIB_FLAGS)
endef

LINK_ALL_OBJ_TO_EXE_DEPS = $(RUNNER_DEP)
define LINK_ALL_OBJ_TO_EXE
$(RUNNER) link @ -nologo $(LFLAGS) -subsystem:windows -out:$@ $(filter-out $(RUNNER_DEP),$^) $(IMPLIB_NAME) $(LIB_FLAGS)
endef

LINK_ALL_OBJ_TO_EXE_NOLIB_DEPS = $(RUNNER_DEP)
define LINK_ALL_OBJ_TO_EXE_NOLIB
$(RUNNER) link @ -nologo $(LFLAGS) -subsystem:console -out:$@ $(filter-out $(RUNNER_DEP),$^) 
endef

LINK_ALL_OBJ_TO_EXE_NOCGUILIB_DEPS = $(RUNNER_DEP)
define LINK_ALL_OBJ_TO_EXE_NOCGUILIB
$(RUNNER) link @ -nologo $(LFLAGS) -subsystem:console -out:$@ $(filter-out $(RUNNER_DEP),$^) $(LIB_FLAGS)
endef

LINK_CONSOLE_DEPS = $(IMPLIB_NAME) $(RUNNER_DEP)
define LINK_CONSOLE
$(RUNNER) link @ -nologo $(LFLAGS) -subsystem:console -out:$@ $< $(IMPLIB_NAME) $(LIB_FLAGS)
endef

LINK_CONSOLE_NOLIB_DEPS = $(RUNNER_DEP)
define LINK_CONSOLE_NOLIB
$(RUNNER) link @ -nologo $(LFLAGS) -subsystem:console -out:$@ $< $(LIB_FLAGS)
endef

ifdef STATICLINK
# link as a static library

LINK_OBJ_TO_LIB_DEPS = $(RUNNER_DEP)
define LINK_OBJ_TO_LIB
$(RUNNER) lib @ -nologo -out:$(LIB_NAME) $(LIB_OBJS)
endef

else
# link as a DLL

LINK_OBJ_TO_LIB_DEPS = $(RUNNER_DEP)
define LINK_OBJ_TO_LIB
$(RUNNER) link @ -nologo $(LFLAGS) -dll -def:$(EXPDEF_NAME) -out:$(DLL_NAME) -implib:$(IMPLIB_NAME) $(LIB_OBJS) $(LIB_FLAGS)
endef

endif # ifdef STATICLINK



# -------- Rules for installing and removing the library files. --------

ifneq ($(wildcard $(DJDIR)/bin/cp.exe),)
HAVE_CP = 1
endif

ifndef STATICLINK
$(WINDIR_U)/$(DLL_BASENAME): $(DLL_NAME)
ifdef HAVE_CP
	$(DJDIR)/bin/cp $(subst \,/,$< $@)
else
	copy $(subst /,\,$< $@)
endif
endif

$(SYSTEM_LIB_DIR)/$(IMPLIB_BASENAME): $(IMPLIB_NAME)
ifdef HAVE_CP
	$(DJDIR)/bin/cp $(subst \,/,$< $@)
else
	copy $(subst /,\,$< $@)
endif

$(SYSTEM_INCLUDE_DIR)/cgui.h: include/cgui.h
ifdef HAVE_CP
	$(DJDIR)/bin/cp $(subst \,/,$< $@)
else
	copy $(subst /,\,$< $@)
endif

$(SYSTEM_INCLUDE_DIR)/cgui:
	md $(subst /,\,$@)

$(SYSTEM_INCLUDE_DIR)/cgui/%.h: include/cgui/%.h include/cgui
ifdef HAVE_CP
	$(DJDIR)/bin/cp $(subst \,/,$< $@)
else
	copy $(subst /,\,$< $@)
endif


INSTALL_HEADERS = $(addprefix $(MSVCDIR_U)/,$(wildcard include/cgui/*.h))

INSTALL_FILES = $(SYSTEM_LIB_DIR)/$(IMPLIB_BASENAME) \
 $(SYSTEM_INCLUDE_DIR)/cgui.h \
 $(SYSTEM_INCLUDE_DIR)/cgui \
 $(INSTALL_HEADERS)

ifndef STATICLINK
INSTALL_FILES += $(WINDIR_U)/$(DLL_BASENAME)
endif

install: $(INSTALL_FILES)
	@echo The $(DESCRIPTION) MSVC library has been installed.

UNINSTALL_FILES = \
 $(SYSTEM_LIB_DIR)/cgui.lib $(SYSTEM_LIB_DIR)/cgui_s.lib \
 $(SYSTEM_LIB_DIR)/cguid.lib $(SYSTEM_LIB_DIR)/cguid_s.lib \
 $(SYSTEM_INCLUDE_DIR)/cgui.h $(SYSTEM_INCLUDE_DIR)/cgui/*.h \
 $(WINDIR_U)/cgui$(LIB_VERSION).dll $(WINDIR_U)/cguid$(LIB_VERSION).dll

uninstall:
	-rm -fv $(UNINSTALL_FILES)
	-rd $(SYSTEM_INCLUDE_DIR_D)\cgui
	@echo All gone!



# -------- Compile anything that can't be done in makefile.all. --------

# this section is empty


# -------- Generate automatic dependencies. --------

DEPEND_PARAMS = $(GCC2MSVC) -MM -MG -I./include -DCGUI_SCAN_DEPEND

depend:
	gcc $(DEPEND_PARAMS) src/*.c examples/*.c $(wildcard docs/*.c src/misc/*.c) > _depend.tmp
	sed -e 's/^\([a-zA-Z0-9_]*\)\.o:/obj\/msvc\/cgui\/\1\.obj:/' _depend.tmp > obj/msvc/cgui/makefile.dep
	sed -e 's/^\([a-zA-Z0-9_]*\)\.o:/obj\/msvc\/cguid\/\1\.obj:/' _depend.tmp > obj/msvc/cguid/makefile.dep
	sed -e 's/^\([a-zA-Z0-9_]*\)\.o:/obj\/msvc\/cgui_s\/\1\.obj:/' _depend.tmp > obj/msvc/cgui_s/makefile.dep
	sed -e 's/^\([a-zA-Z0-9_]*\)\.o:/obj\/msvc\/cguid_s\/\1\.obj:/' _depend.tmp > obj/msvc/cguid_s/makefile.dep
	rm _depend.tmp 
