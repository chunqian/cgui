#!/bin/sh
#
# Sets up the CGUI package for building with the specified compiler,
# and if possible converts text files to the desired target format.

proc_help()
{
   echo
   echo "Usage: ./fix.sh <platform> [--quick|--dtou|--utod|--utom|--mtou]"
   echo "Where <platform> is one of:"
   echo "  djgpp       DOS/DJGPP"
   echo "  mingw32     Win32/MinGW32"
   echo "  msvc        Win32/MSVC"
   echo "  unix        Linux/gcc"
   echo "  cygwin      Cygwin"
   echo "  mac         Mac OS X"
   echo "The other parameters control conversion of text files:"
   echo "  --quick     Turn of text file conversion"
   echo "  --dtou      Convert from DOS/Win32 format to Unix"
   echo "  --utod      Convert from Unix to DOS/Win32 format"
   echo "  --utom      Convert from Unix to Macintosh format"
   echo "  --mtou      Convert from Macintosh to Unix format"
   echo "  --ttos      Convert tabs to 3 spaces int c-files"
   echo ""
   LINE_ENDING_CONVERSION="0";
}

proc_fix()
{
   echo "Configuring CGUI for $1..."

   if [ "$2" != "none" ]; then
      echo "# generated by fix.sh" > makefile
      echo "MAKEFILE_INC = $2" >> makefile
      echo "include misc/makefile.all" >> makefile
   fi
}

proc_filelist()
{
   # common files.
   CGUI_FILELIST=`find . -type f "(" \
      -name "*.c" -o -name "*.cfg" -o -name "*.def" -o -name "*.h" -o -name "*.t" -o -name "*.ht" -o -name "*.txt" -o -name "*._tx" -o \
      -name "*.lst" -o -name "makefile*" -o -name "emptymak" -o -name "*.html" \
   ")"`

   if [ "$1" != "omit_sh" ]; then
      CGUI_FILELIST="$CGUI_FILELIST `find . -type f -name '*.sh'`"
   fi

   if [ "$1" != "omit_bat" ]; then
      CGUI_FILELIST="$CGUI_FILELIST `find . -type f -name '*.bat'`"
   fi
}

proc_ttos()
{
   echo "Converting files from tabs to spaces..."
   CFILES=`find -type f -name "*.c"`
   for file in $CFILES; do
      echo "$file"
      cp $file _tmpfile
      perl -p -i -e "s/\t/   /" _tmpfile
      touch -r $file _tmpfile
      mv _tmpfile $file
   done
}

proc_utod()
{
   echo "Converting files from Unix to DOS/Win32..."
   proc_filelist "omit_sh"
   for file in $CGUI_FILELIST; do
      echo "$file"
      cp $file _tmpfile
      perl -p -i -e "s/([^\r]|^)\n/\1\r\n/" _tmpfile
      touch -r $file _tmpfile
      mv _tmpfile $file
   done
}

proc_dtou()
{
   echo "Converting files from DOS/Win32 to Unix..."
   proc_filelist "omit_bat"
   for file in $CGUI_FILELIST; do
      echo "$file"
      mv $file _tmpfile
      tr -d '\015' < _tmpfile > $file
      touch -r _tmpfile $file
      rm _tmpfile
   done
   chmod +x *.sh misc/*.sh
}

proc_utom()
{
   echo "Converting files from Unix to Macintosh..."
   proc_filelist "omit_sh"
   for file in $CGUI_FILELIST; do
      echo "$file"
      mv $file _tmpfile
      tr '\012' '\015' < _tmpfile > $file
      touch -r _tmpfile $file
      rm _tmpfile
   done
   chmod +x *.sh misc/*.sh
}

proc_mtou()
{
   echo "Converting files from Macintosh to Unix..."
   proc_filelist
   for file in $CGUI_FILELIST; do
      echo "$file"
      mv $file _tmpfile
      tr '\015' '\012' < _tmpfile > $file
      touch -r _tmpfile $file
      rm _tmpfile
   done
   chmod +x *.sh misc/*.sh
}

if [ $# -gt 1 ]; then
   LINE_ENDING_CONVERSION="1";
else
   LINE_ENDING_CONVERSION="0";
fi;

# prepare CGUI for the given platform.
case "$1" in
   "djgpp"   ) proc_fix     "DOS (djgpp)"       "makefile.dj";;
   "mingw32" ) proc_fix     "Windows (Mingw32)" "makefile.mgw";;
   "msvc"    ) proc_fix     "Windows (MSVC)"    "makefile.vc";;
   "cygwin"  ) proc_fix     "Cygwin"            "makefile.cyg";;
   "unix"    ) proc_fix     "Unix"              "makefile.uni";;
   "mac"     ) proc_fix     "Mac"               "makefile.osx";;
   "help"    ) proc_help;;
   *         ) proc_help;;
esac

# convert all text-file line endings.

if [ "$LINE_ENDING_CONVERSION" -eq "1" ]; then
   case "$2" in
      "--utod"  ) proc_utod;;
      "--dtou"  ) proc_dtou;;
      "--utom"  ) proc_utom;;
      "--mtou"  ) proc_mtou;;
      "--ttos"  ) proc_ttos;;
      "--quick" ) echo "No text file conversion...";;
      *         ) if [ "$1" == "mac" ]; then proc_utom; fi;;
   esac;
fi

echo "Done!"
